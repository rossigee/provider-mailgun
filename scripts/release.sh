#!/bin/bash
set -euo pipefail

# release.sh - Automated release script for provider-mailgun
# Usage: ./scripts/release.sh <version>
# Example: ./scripts/release.sh v0.8.2

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to validate version format
validate_version() {
    local version="$1"
    if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        print_error "Invalid version format: $version"
        print_error "Version must be in format: vX.Y.Z (e.g., v0.8.2)"
        exit 1
    fi
}

# Function to check if we're in the right directory
check_directory() {
    if [[ ! -f "$ROOT_DIR/VERSION" ]] || [[ ! -f "$ROOT_DIR/Makefile" ]]; then
        print_error "Must be run from provider-mailgun root directory"
        exit 1
    fi
}

# Function to check for uncommitted changes
check_git_status() {
    if [[ -n "$(git status --porcelain)" ]]; then
        print_error "Working directory has uncommitted changes. Please commit or stash them first."
        exit 1
    fi
}

# Function to update version in all files
update_version() {
    local new_version="$1"
    local old_version
    old_version="$(cat "$ROOT_DIR/VERSION")"

    print_status "Updating version from $old_version to $new_version"

    # Update VERSION file
    echo "$new_version" > "$ROOT_DIR/VERSION"

    # Files to update
    local files=(
        "CLAUDE.md"
        "README.md"
        "package/crossplane.yaml"
        "examples/provider-config.yaml"
    )

    # Update version references in all files
    for file in "${files[@]}"; do
        if [[ -f "$ROOT_DIR/$file" ]]; then
            print_status "Updating $file"
            # Use a more portable sed command
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS
                sed -i '' "s|$old_version|$new_version|g" "$ROOT_DIR/$file"
            else
                # Linux
                sed -i "s|$old_version|$new_version|g" "$ROOT_DIR/$file"
            fi
        else
            print_warning "File not found: $file"
        fi
    done

    print_success "Version updated to $new_version"
}

# Function to validate the updates
validate_updates() {
    local version="$1"
    local issues=0

    print_status "Validating version updates..."

    # Check VERSION file
    if [[ "$(cat "$ROOT_DIR/VERSION")" != "$version" ]]; then
        print_error "VERSION file not updated correctly"
        ((issues++))
    fi

    # Check for any remaining old version references
    local old_pattern="v[0-9]+\.[0-9]+\.[0-9]+"
    local old_refs
    old_refs="$(grep -r "$old_pattern" "$ROOT_DIR" \
        --include="*.md" --include="*.yaml" --include="*.yml" \
        --exclude-dir=.git \
        | grep -v "$version" || true)"

    if [[ -n "$old_refs" ]]; then
        print_warning "Found potential old version references:"
        echo "$old_refs"
        print_warning "Please review these manually"
    fi

    if [[ $issues -eq 0 ]]; then
        print_success "Version validation passed"
    else
        print_error "Version validation failed with $issues issues"
        exit 1
    fi
}

# Function to create git commit and tag
create_release() {
    local version="$1"

    print_status "Creating git commit and tag for $version"

    # Add all changes
    git add .

    # Create commit
    git commit -m "chore: release $version

- Updated VERSION file to $version
- Updated all documentation and example references
- Ready for release workflow deployment

Generated by: scripts/release.sh"

    # Create tag
    git tag "$version"

    print_success "Created commit and tag $version"
}

# Function to display next steps
show_next_steps() {
    local version="$1"

    echo
    print_success "Release $version is ready!"
    echo
    echo "Next steps:"
    echo "1. Review the changes: git show --name-only"
    echo "2. Push the commit: git push"
    echo "3. Push the tag: git push origin $version"
    echo "4. Monitor the release workflow: gh run list"
    echo
    echo "The GitHub Actions workflow will:"
    echo "- Build and push Docker images to ghcr.io/rossigee/provider-mailgun:$version"
    echo "- Build and push Docker images to ghcr.io/rossigee/provider-mailgun:latest"
    echo "- Publish Crossplane packages to the registry"
    echo "- Create a GitHub release with automated notes"
}

# Main function
main() {
    local version="${1:-}"

    # Check arguments
    if [[ -z "$version" ]]; then
        print_error "Usage: $0 <version>"
        print_error "Example: $0 v0.8.2"
        exit 1
    fi

    # Validate inputs and environment
    validate_version "$version"
    check_directory
    check_git_status

    # Perform release steps
    print_status "Starting release process for $version"
    update_version "$version"
    validate_updates "$version"
    create_release "$version"
    show_next_steps "$version"

    print_success "Release script completed successfully!"
}

# Run main function
main "$@"
